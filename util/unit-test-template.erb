/**
 * Copyright (C) <%= @date.strftime('%Y') %> Geoff Johnson
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * Author:
 *  Geoff Johnson <geoff.jay@gmail.com>
 */

/**
 * Unit test generated automatically on: <%= @date.strftime('%A, %d %B %Y') %>
 */
<% if is_interface(@object)? %>
public abstract class Cld.<%= @object %>Tests : Cld.ObjectTests {

    public <%= @object %>Tests (string name) {
        base (name);
    }
}
<% else %>
public class Cld.<%= @object %>Tests : Cld.<%= @interface %>Tests {

    public <%= @object %>Tests () {
        base ("<%= @object %>");
        <% if is_buildable(@object)? %>
        add_test ("[<%= @object %>] Test construction from XML node string", test_xml_construct);
        <% end %>
        add_test ("[<%= @object %>] Test sample", test_sample);
    }

    public override void set_up () {
        test_object = new <%= @object %> ();
    }

    public override void tear_down () {
        test_object = null;
    }

    <% if is_buildable(@object)? %>
    private void test_xml_construct () {
        var xml = """
            <object id="<%= @id %>" type="<%= @type %>">
                <% for @property in @properties %>
                <property name="<%= @propname %>"><%= @propdefault %></property>
                <% end %>
            </object>
        """;

        Xml.Doc *doc = Xml.Parser.parse_memory (xml, xml.length);
        Xml.XPath.Context *ctx = new Xml.XPath.Context (doc);
        Xml.XPath.Object *obj = ctx->eval_expression ("//object");
        Xml.Node *node = obj->nodesetval->item (0);

        /* XXX doesn't seem inline with using set_up and test_object */
        var test_<%= @interface %> = new <%= @object %>.from_xml_node (node);
        assert (test_<%= @interface %> != null);
        assert ((test_<%= @interface %> as Cld.Object).id == "<%= @id %>");
    }
    <% end %>

    private void test_sample () {
        var test_<%= @interface %> = test_object as <%= @object %>;
        assert (test_<%= @interface %> != null);
    }
}
<% end %>
